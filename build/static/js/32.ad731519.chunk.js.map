{"version":3,"sources":["components/Page.js","hooks/useIsMountedRef.js","utils/helpError.js","components/authentication/reset-password/ResetPasswordForm.js","views/authentication/ResetPassword.js"],"names":["Page","forwardRef","children","title","other","ref","propTypes","PropTypes","node","isRequired","string","useIsMountedRef","isMounted","useRef","useEffect","current","emailAlreadyinUse","invalidEmail","businessEmail","userDisabled","userNotFound","wrongPassword","weakPassword","code","text","emailError","errors","error","helperText","passwordError","ResetPasswordForm","onSent","onGetEmail","isMountedRef","ResetPasswordSchema","Yup","shape","email","required","formik","useFormik","initialValues","validationSchema","onSubmit","async","values","setErrors","setSubmitting","afterSubmit","touched","isSubmitting","handleSubmit","getFieldProps","value","autoComplete","noValidate","TextField","fullWidth","type","label","Boolean","sx","mb","LoadingButton","size","variant","color","pending","RootStyle","styled","theme","display","minHeight","alignItems","justifyContent","padding","spacing","HeaderStyle","top","left","width","position","breakpoints","up","ResetPassword","setEmail","useState","sent","setSent","to","Logo","Container","Box","maxWidth","mx","textAlign","component","alt","src","Typography","gutterBottom","Button","RouterLink","PATH_AUTH","login","mt"],"mappings":"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","file":"static/js/32.ad731519.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { forwardRef } from 'react';\n// material\nimport { Box } from '@material-ui/core';\n\n// ----------------------------------------------------------------------\n\nconst Page = forwardRef(({ children, title = '', ...other }, ref) => (\n  <Box ref={ref} {...other}>\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n    {children}\n  </Box>\n));\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string\n};\n\nexport default Page;\n","import { useRef, useEffect } from 'react';\n\n// ----------------------------------------------------------------------\n\nexport default function useIsMountedRef() {\n  const isMounted = useRef(true);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    []\n  );\n\n  return isMounted;\n}\n","// ----------------------------------------------------------------------\n\nexport const codes = {\n  // Email\n  emailAlreadyinUse: {\n    code: 'auth/email-already-in-use',\n    text: 'There already exists an account with the given email address.'\n  },\n  invalidEmail: {\n    code: 'auth/invalid-email',\n    text: 'The email address is not valid.'\n  },\n  businessEmail: {\n    code: 'auth/business-email',\n    text: 'Please enter a business email address, your email is not valid.'\n  },\n  userDisabled: {\n    code: 'auth/user-disabled',\n    text: 'The user corresponding to the given credential has been disabled.'\n  },\n  userNotFound: {\n    code: 'auth/user-not-found',\n    text: 'There is no user corresponding to the email address.'\n  },\n\n  // Password\n  wrongPassword: {\n    code: 'auth/wrong-password',\n    text: 'Wrong password'\n  },\n  weakPassword: {\n    code: 'auth/weak-password',\n    text: 'Password should be at least 6 characters'\n  }\n};\n\nconst {\n  emailAlreadyinUse,\n  invalidEmail,\n  businessEmail,\n  userDisabled,\n  userNotFound,\n  wrongPassword,\n  weakPassword\n} = codes;\n\nexport function emailError(errors) {\n  return {\n    error:\n      errors === emailAlreadyinUse.code ||\n      errors === businessEmail.code ||\n      errors === invalidEmail.code ||\n      errors === userDisabled.code ||\n      errors === userNotFound.code,\n    helperText:\n      (errors === emailAlreadyinUse.code && emailAlreadyinUse.text) ||\n      (errors === businessEmail.code && businessEmail.text) ||\n      (errors === invalidEmail.code && invalidEmail.text) ||\n      (errors === userDisabled.code && userDisabled.text) ||\n      (errors === userNotFound.code && userNotFound.text)\n  };\n}\n\nexport function passwordError(errors) {\n  return {\n    error: errors === wrongPassword.code || errors === weakPassword.code,\n    helperText:\n      (errors === wrongPassword.code && wrongPassword.text) ||\n      (errors === weakPassword.code && weakPassword.text)\n  };\n}\n","import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { TextField } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// hooks\n// import useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n// utils\nimport { emailError } from '../../../utils/helpError';\n\n// ----------------------------------------------------------------------\n\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func\n};\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\n  // const { resetPassword } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string()\n      .email('Email must be a valid email address')\n      .required('Email is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: 'test@thimble.com'\n    },\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        // await resetPassword(values.email);\n        if (isMountedRef.current) {\n          onSent();\n          onGetEmail(formik.values.email);\n          setSubmitting(false);\n        }\n      } catch (error) {\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.code });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <TextField\n          fullWidth\n          {...getFieldProps('email')}\n          type=\"email\"\n          label=\"Email address\"\n          error={\n            Boolean(touched.email && errors.email) ||\n            emailError(errors.afterSubmit).error\n          }\n          helperText={\n            (touched.email && errors.email) ||\n            emailError(errors.afterSubmit).helperText\n          }\n          sx={{ mb: 3 }}\n        />\n        <LoadingButton\n          fullWidth\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"secondary\"\n          pending={isSubmitting}\n        >\n          Reset Password\n        </LoadingButton>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// material\nimport { experimentalStyled as styled } from '@material-ui/core/styles';\nimport { Box, Button, Container, Typography } from '@material-ui/core';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Logo from '../../components/Logo';\nimport Page from '../../components/Page';\nimport { ResetPasswordForm } from '../../components/authentication/reset-password';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\nconst HeaderStyle = styled('header')(({ theme }) => ({\n  top: 0,\n  left: 0,\n  width: '100%',\n  position: 'absolute',\n  padding: theme.spacing(3),\n  [theme.breakpoints.up('sm')]: {\n    padding: theme.spacing(5)\n  }\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState('');\n  const [sent, setSent] = useState(false);\n\n  return (\n    <RootStyle title=\"Thimble | Reset Password\">\n      <HeaderStyle>\n        <RouterLink to=\"/\">\n          <Logo />\n        </RouterLink>\n      </HeaderStyle>\n\n      <Container>\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n          {!sent ? (\n            <>\n              <Typography variant=\"h3\" gutterBottom>\n                Forgot your password?\n              </Typography>\n              <Typography sx={{ color: 'text.secondary', mb: 5 }}>\n                Please enter the email address associated with your account and\n                We will email you a link to reset your password.\n              </Typography>\n\n              <ResetPasswordForm\n                onSent={() => setSent(true)}\n                onGetEmail={(value) => setEmail(value)}\n              />\n\n              <Button\n                fullWidth\n                size=\"large\"\n                component={RouterLink}\n                to={PATH_AUTH.login}\n                sx={{ mt: 1 }}\n              >\n                Back\n              </Button>\n            </>\n          ) : (\n            <Box sx={{ textAlign: 'center' }}>\n              <Box\n                component=\"img\"\n                alt=\"sent email\"\n                src=\"/static/icons/ic_email_sent.svg\"\n                sx={{ mb: 5, mx: 'auto' }}\n              />\n              <Typography variant=\"h3\" gutterBottom>\n                Request sent successfully\n              </Typography>\n              <Typography>\n                We have sent a confirmation email to &nbsp;\n                <strong>{email}</strong>\n                <br />\n                Please check your email.\n              </Typography>\n\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                component={RouterLink}\n                to={PATH_AUTH.login}\n                sx={{ mt: 5 }}\n              >\n                Back\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Container>\n    </RootStyle>\n  );\n}\n"],"sourceRoot":""}